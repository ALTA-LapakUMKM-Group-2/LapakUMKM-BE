// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	users "lapakUmkm/features/users"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: id, old, new, confirm
func (_m *AuthServiceInterface) ChangePassword(id uint, old string, new string, confirm string) error {
	ret := _m.Called(id, old, new, confirm)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, string, string) error); ok {
		r0 = rf(id, old, new, confirm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgetPassword provides a mock function with given fields: email
func (_m *AuthServiceInterface) ForgetPassword(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSSOGoogleUrl provides a mock function with given fields:
func (_m *AuthServiceInterface) GetSSOGoogleUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsUserExist provides a mock function with given fields: email
func (_m *AuthServiceInterface) IsUserExist(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *AuthServiceInterface) Login(email string, password string) (string, users.UserEntity, error) {
	ret := _m.Called(email, password)

	var r0 string
	var r1 users.UserEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (string, users.UserEntity, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) users.UserEntity); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(users.UserEntity)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginSSOGoogle provides a mock function with given fields: userEntity
func (_m *AuthServiceInterface) LoginSSOGoogle(userEntity users.UserEntity) (string, users.UserEntity, error) {
	ret := _m.Called(userEntity)

	var r0 string
	var r1 users.UserEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(users.UserEntity) (string, users.UserEntity, error)); ok {
		return rf(userEntity)
	}
	if rf, ok := ret.Get(0).(func(users.UserEntity) string); ok {
		r0 = rf(userEntity)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(users.UserEntity) users.UserEntity); ok {
		r1 = rf(userEntity)
	} else {
		r1 = ret.Get(1).(users.UserEntity)
	}

	if rf, ok := ret.Get(2).(func(users.UserEntity) error); ok {
		r2 = rf(userEntity)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPassword provides a mock function with given fields: token, newPassword, confirmPassword
func (_m *AuthServiceInterface) NewPassword(token string, newPassword string, confirmPassword string) error {
	ret := _m.Called(token, newPassword, confirmPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(token, newPassword, confirmPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: request
func (_m *AuthServiceInterface) Register(request users.UserEntity) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(users.UserEntity) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthServiceInterface(t mockConstructorTestingTNewAuthServiceInterface) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
