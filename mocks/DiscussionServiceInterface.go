// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	discussions "lapakUmkm/features/discussions"

	mock "github.com/stretchr/testify/mock"
)

// DiscussionServiceInterface is an autogenerated mock type for the DiscussionServiceInterface type
type DiscussionServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: discussionEntity
func (_m *DiscussionServiceInterface) Create(discussionEntity discussions.DiscussionEntity) (discussions.DiscussionEntity, error) {
	ret := _m.Called(discussionEntity)

	var r0 discussions.DiscussionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(discussions.DiscussionEntity) (discussions.DiscussionEntity, error)); ok {
		return rf(discussionEntity)
	}
	if rf, ok := ret.Get(0).(func(discussions.DiscussionEntity) discussions.DiscussionEntity); ok {
		r0 = rf(discussionEntity)
	} else {
		r0 = ret.Get(0).(discussions.DiscussionEntity)
	}

	if rf, ok := ret.Get(1).(func(discussions.DiscussionEntity) error); ok {
		r1 = rf(discussionEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, userId
func (_m *DiscussionServiceInterface) Delete(id uint, userId uint) error {
	ret := _m.Called(id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: myId, userId
func (_m *DiscussionServiceInterface) GetAll(myId uint, userId uint) ([]discussions.DiscussionEntity, error) {
	ret := _m.Called(myId, userId)

	var r0 []discussions.DiscussionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]discussions.DiscussionEntity, error)); ok {
		return rf(myId, userId)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []discussions.DiscussionEntity); ok {
		r0 = rf(myId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discussions.DiscussionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(myId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *DiscussionServiceInterface) GetById(id uint) (discussions.DiscussionEntity, error) {
	ret := _m.Called(id)

	var r0 discussions.DiscussionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (discussions.DiscussionEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) discussions.DiscussionEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(discussions.DiscussionEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByProductId provides a mock function with given fields: productId
func (_m *DiscussionServiceInterface) GetDiscussionByProductId(productId uint) ([]discussions.DiscussionEntity, error) {
	ret := _m.Called(productId)

	var r0 []discussions.DiscussionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]discussions.DiscussionEntity, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uint) []discussions.DiscussionEntity); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discussions.DiscussionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: discussionEntity, id, userId
func (_m *DiscussionServiceInterface) Update(discussionEntity discussions.DiscussionEntity, id uint, userId uint) (discussions.DiscussionEntity, error) {
	ret := _m.Called(discussionEntity, id, userId)

	var r0 discussions.DiscussionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(discussions.DiscussionEntity, uint, uint) (discussions.DiscussionEntity, error)); ok {
		return rf(discussionEntity, id, userId)
	}
	if rf, ok := ret.Get(0).(func(discussions.DiscussionEntity, uint, uint) discussions.DiscussionEntity); ok {
		r0 = rf(discussionEntity, id, userId)
	} else {
		r0 = ret.Get(0).(discussions.DiscussionEntity)
	}

	if rf, ok := ret.Get(1).(func(discussions.DiscussionEntity, uint, uint) error); ok {
		r1 = rf(discussionEntity, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscussionServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscussionServiceInterface creates a new instance of DiscussionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscussionServiceInterface(t mockConstructorTestingTNewDiscussionServiceInterface) *DiscussionServiceInterface {
	mock := &DiscussionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
