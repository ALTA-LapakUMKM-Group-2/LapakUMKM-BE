// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	productTransactionDetails "lapakUmkm/features/productTransactionDetails"

	mock "github.com/stretchr/testify/mock"
)

// ProductTransactionDetailDataInterface is an autogenerated mock type for the ProductTransactionDetailDataInterface type
type ProductTransactionDetailDataInterface struct {
	mock.Mock
}

// SelectById provides a mock function with given fields: id
func (_m *ProductTransactionDetailDataInterface) SelectById(id uint) (productTransactionDetails.ProductTransactionDetailEntity, error) {
	ret := _m.Called(id)

	var r0 productTransactionDetails.ProductTransactionDetailEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (productTransactionDetails.ProductTransactionDetailEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) productTransactionDetails.ProductTransactionDetailEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productTransactionDetails.ProductTransactionDetailEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByTransaksiId provides a mock function with given fields: productId
func (_m *ProductTransactionDetailDataInterface) SelectByTransaksiId(productId uint) ([]productTransactionDetails.ProductTransactionDetailEntity, error) {
	ret := _m.Called(productId)

	var r0 []productTransactionDetails.ProductTransactionDetailEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]productTransactionDetails.ProductTransactionDetailEntity, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uint) []productTransactionDetails.ProductTransactionDetailEntity); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productTransactionDetails.ProductTransactionDetailEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: productTransactionDetailEntity
func (_m *ProductTransactionDetailDataInterface) Store(productTransactionDetailEntity productTransactionDetails.ProductTransactionDetailEntity) (uint, error) {
	ret := _m.Called(productTransactionDetailEntity)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(productTransactionDetails.ProductTransactionDetailEntity) (uint, error)); ok {
		return rf(productTransactionDetailEntity)
	}
	if rf, ok := ret.Get(0).(func(productTransactionDetails.ProductTransactionDetailEntity) uint); ok {
		r0 = rf(productTransactionDetailEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(productTransactionDetails.ProductTransactionDetailEntity) error); ok {
		r1 = rf(productTransactionDetailEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductTransactionDetailDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductTransactionDetailDataInterface creates a new instance of ProductTransactionDetailDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductTransactionDetailDataInterface(t mockConstructorTestingTNewProductTransactionDetailDataInterface) *ProductTransactionDetailDataInterface {
	mock := &ProductTransactionDetailDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
