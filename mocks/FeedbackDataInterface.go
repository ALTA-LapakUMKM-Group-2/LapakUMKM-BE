// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	feedbacks "lapakUmkm/features/feedbacks"

	mock "github.com/stretchr/testify/mock"
)

// FeedbackDataInterface is an autogenerated mock type for the FeedbackDataInterface type
type FeedbackDataInterface struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *FeedbackDataInterface) Destroy(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: feedbackEntity, id
func (_m *FeedbackDataInterface) Edit(feedbackEntity feedbacks.FeedbackEntity, id uint) error {
	ret := _m.Called(feedbackEntity, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(feedbacks.FeedbackEntity, uint) error); ok {
		r0 = rf(feedbackEntity, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields: userId
func (_m *FeedbackDataInterface) SelectAll(userId uint) ([]feedbacks.FeedbackEntity, error) {
	ret := _m.Called(userId)

	var r0 []feedbacks.FeedbackEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]feedbacks.FeedbackEntity, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []feedbacks.FeedbackEntity); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedbacks.FeedbackEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *FeedbackDataInterface) SelectById(id uint) (feedbacks.FeedbackEntity, error) {
	ret := _m.Called(id)

	var r0 feedbacks.FeedbackEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (feedbacks.FeedbackEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) feedbacks.FeedbackEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(feedbacks.FeedbackEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFeedbackByDetailTransactionId provides a mock function with given fields: detailTransactionId
func (_m *FeedbackDataInterface) SelectFeedbackByDetailTransactionId(detailTransactionId uint) ([]feedbacks.FeedbackEntity, error) {
	ret := _m.Called(detailTransactionId)

	var r0 []feedbacks.FeedbackEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]feedbacks.FeedbackEntity, error)); ok {
		return rf(detailTransactionId)
	}
	if rf, ok := ret.Get(0).(func(uint) []feedbacks.FeedbackEntity); ok {
		r0 = rf(detailTransactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedbacks.FeedbackEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(detailTransactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectFeedbackByProductId provides a mock function with given fields: productId
func (_m *FeedbackDataInterface) SelectFeedbackByProductId(productId uint) ([]feedbacks.FeedbackEntity, error) {
	ret := _m.Called(productId)

	var r0 []feedbacks.FeedbackEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]feedbacks.FeedbackEntity, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uint) []feedbacks.FeedbackEntity); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feedbacks.FeedbackEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: feedbackEntity
func (_m *FeedbackDataInterface) Store(feedbackEntity feedbacks.FeedbackEntity) (uint, error) {
	ret := _m.Called(feedbackEntity)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(feedbacks.FeedbackEntity) (uint, error)); ok {
		return rf(feedbackEntity)
	}
	if rf, ok := ret.Get(0).(func(feedbacks.FeedbackEntity) uint); ok {
		r0 = rf(feedbackEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(feedbacks.FeedbackEntity) error); ok {
		r1 = rf(feedbackEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFeedbackDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeedbackDataInterface creates a new instance of FeedbackDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeedbackDataInterface(t mockConstructorTestingTNewFeedbackDataInterface) *FeedbackDataInterface {
	mock := &FeedbackDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
