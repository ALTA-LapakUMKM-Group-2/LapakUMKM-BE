// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	users "lapakUmkm/features/users"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserServiceInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: id
func (_m *UserServiceInterface) GetUser(id uint) (users.UserEntity, error) {
	ret := _m.Called(id)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.UserEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) users.UserEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, userEntity
func (_m *UserServiceInterface) Update(id uint, userEntity users.UserEntity) (users.UserEntity, error) {
	ret := _m.Called(id, userEntity)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) (users.UserEntity, error)); ok {
		return rf(id, userEntity)
	}
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) users.UserEntity); ok {
		r0 = rf(id, userEntity)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, users.UserEntity) error); ok {
		r1 = rf(id, userEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToProfile provides a mock function with given fields: id, file
func (_m *UserServiceInterface) UpdateToProfile(id uint, file *multipart.FileHeader) (string, error) {
	ret := _m.Called(id, file)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader) (string, error)); ok {
		return rf(id, file)
	}
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader) string); ok {
		r0 = rf(id, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, *multipart.FileHeader) error); ok {
		r1 = rf(id, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToSeller provides a mock function with given fields: id, userEntity
func (_m *UserServiceInterface) UpdateToSeller(id uint, userEntity users.UserEntity) (users.UserEntity, error) {
	ret := _m.Called(id, userEntity)

	var r0 users.UserEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) (users.UserEntity, error)); ok {
		return rf(id, userEntity)
	}
	if rf, ok := ret.Get(0).(func(uint, users.UserEntity) users.UserEntity); ok {
		r0 = rf(id, userEntity)
	} else {
		r0 = ret.Get(0).(users.UserEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, users.UserEntity) error); ok {
		r1 = rf(id, userEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceInterface(t mockConstructorTestingTNewUserServiceInterface) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
