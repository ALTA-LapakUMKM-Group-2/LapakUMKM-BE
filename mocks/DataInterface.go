// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	chats "lapakUmkm/features/chats"

	mock "github.com/stretchr/testify/mock"
)

// DataInterface is an autogenerated mock type for the DataInterface type
type DataInterface struct {
	mock.Mock
}

// SelectAll provides a mock function with given fields: userId
func (_m *DataInterface) SelectAll(userId uint) ([]chats.ChatEntity, error) {
	ret := _m.Called(userId)

	var r0 []chats.ChatEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]chats.ChatEntity, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []chats.ChatEntity); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chats.ChatEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllMessageToMe provides a mock function with given fields: userId
func (_m *DataInterface) SelectAllMessageToMe(userId uint) ([]chats.ChatEntity, error) {
	ret := _m.Called(userId)

	var r0 []chats.ChatEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]chats.ChatEntity, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []chats.ChatEntity); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chats.ChatEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *DataInterface) SelectById(id uint) (chats.ChatEntity, error) {
	ret := _m.Called(id)

	var r0 chats.ChatEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (chats.ChatEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) chats.ChatEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(chats.ChatEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByRoomId provides a mock function with given fields: roomId
func (_m *DataInterface) SelectByRoomId(roomId string) ([]chats.ChatEntity, error) {
	ret := _m.Called(roomId)

	var r0 []chats.ChatEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]chats.ChatEntity, error)); ok {
		return rf(roomId)
	}
	if rf, ok := ret.Get(0).(func(string) []chats.ChatEntity); ok {
		r0 = rf(roomId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chats.ChatEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roomId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: chatEntity
func (_m *DataInterface) Store(chatEntity chats.ChatEntity) (uint, error) {
	ret := _m.Called(chatEntity)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(chats.ChatEntity) (uint, error)); ok {
		return rf(chatEntity)
	}
	if rf, ok := ret.Get(0).(func(chats.ChatEntity) uint); ok {
		r0 = rf(chatEntity)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(chats.ChatEntity) error); ok {
		r1 = rf(chatEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataInterface creates a new instance of DataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataInterface(t mockConstructorTestingTNewDataInterface) *DataInterface {
	mock := &DataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
