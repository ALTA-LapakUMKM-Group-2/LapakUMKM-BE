// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	categories "lapakUmkm/features/categories"

	mock "github.com/stretchr/testify/mock"
)

// CategoryServiceInterface is an autogenerated mock type for the CategoryServiceInterface type
type CategoryServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: categoryEntity
func (_m *CategoryServiceInterface) Create(categoryEntity categories.CategoryEntity) (categories.CategoryEntity, error) {
	ret := _m.Called(categoryEntity)

	var r0 categories.CategoryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(categories.CategoryEntity) (categories.CategoryEntity, error)); ok {
		return rf(categoryEntity)
	}
	if rf, ok := ret.Get(0).(func(categories.CategoryEntity) categories.CategoryEntity); ok {
		r0 = rf(categoryEntity)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	if rf, ok := ret.Get(1).(func(categories.CategoryEntity) error); ok {
		r1 = rf(categoryEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CategoryServiceInterface) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *CategoryServiceInterface) GetAll() ([]categories.CategoryEntity, error) {
	ret := _m.Called()

	var r0 []categories.CategoryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]categories.CategoryEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []categories.CategoryEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.CategoryEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CategoryServiceInterface) GetById(id uint) (categories.CategoryEntity, error) {
	ret := _m.Called(id)

	var r0 categories.CategoryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (categories.CategoryEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) categories.CategoryEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: categoryEntity, id
func (_m *CategoryServiceInterface) Update(categoryEntity categories.CategoryEntity, id uint) (categories.CategoryEntity, error) {
	ret := _m.Called(categoryEntity, id)

	var r0 categories.CategoryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(categories.CategoryEntity, uint) (categories.CategoryEntity, error)); ok {
		return rf(categoryEntity, id)
	}
	if rf, ok := ret.Get(0).(func(categories.CategoryEntity, uint) categories.CategoryEntity); ok {
		r0 = rf(categoryEntity, id)
	} else {
		r0 = ret.Get(0).(categories.CategoryEntity)
	}

	if rf, ok := ret.Get(1).(func(categories.CategoryEntity, uint) error); ok {
		r1 = rf(categoryEntity, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoryServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryServiceInterface creates a new instance of CategoryServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryServiceInterface(t mockConstructorTestingTNewCategoryServiceInterface) *CategoryServiceInterface {
	mock := &CategoryServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
