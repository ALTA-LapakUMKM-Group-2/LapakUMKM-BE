// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	productImages "lapakUmkm/features/productImages"
)

// ProductServiceInterface is an autogenerated mock type for the ProductServiceInterface type
type ProductServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: productId, file
func (_m *ProductServiceInterface) Create(productId uint, file *multipart.FileHeader) (productImages.ProductImagesEntity, error) {
	ret := _m.Called(productId, file)

	var r0 productImages.ProductImagesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader) (productImages.ProductImagesEntity, error)); ok {
		return rf(productId, file)
	}
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader) productImages.ProductImagesEntity); ok {
		r0 = rf(productId, file)
	} else {
		r0 = ret.Get(0).(productImages.ProductImagesEntity)
	}

	if rf, ok := ret.Get(1).(func(uint, *multipart.FileHeader) error); ok {
		r1 = rf(productId, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: productId, id
func (_m *ProductServiceInterface) Delete(productId uint, id uint) error {
	ret := _m.Called(productId, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(productId, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByProductId provides a mock function with given fields: productId
func (_m *ProductServiceInterface) GetByProductId(productId uint) ([]productImages.ProductImagesEntity, error) {
	ret := _m.Called(productId)

	var r0 []productImages.ProductImagesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]productImages.ProductImagesEntity, error)); ok {
		return rf(productId)
	}
	if rf, ok := ret.Get(0).(func(uint) []productImages.ProductImagesEntity); ok {
		r0 = rf(productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productImages.ProductImagesEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductServiceInterface creates a new instance of ProductServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductServiceInterface(t mockConstructorTestingTNewProductServiceInterface) *ProductServiceInterface {
	mock := &ProductServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
