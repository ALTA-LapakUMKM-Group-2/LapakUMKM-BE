openapi: 3.0.2
info:
  title: LapakUMKM
  version: 1.0.0
  description: An API for LapakUMKM Project 

servers:
  - url: https://api.server.test/v1

  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/UMARUUUN11_1/ALTA-LapakUMKM/1.0.0

paths:
####################################
#  AUTH
####################################
  /auth/register:
    post:
      tags:
        - Auth
      summary: register
      description: register akun 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  fullname: "reza2",
                  email: "reza2@mail.com",
                  address: "pekanbaru",
                  phone_number: "0888888"
                }
      responses:
        '200':
          description: Register success.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "Register success"
                  data:
                    {
                      id: 1,
                      fullname: "reza2",
                      email: "reza2@mail.com",
                      address: "pekanbaru",
                      phone_number: "0888888",
                      role: "user"
                    }
        '401' :
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
  
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login akun 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                email: "rischi@mail.com"
                password: "123456"
      responses:
        '200':
          description: Login success.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "Login success"
                  data:
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
        '401' :
          $ref: '#/components/responses/401'
        '400':
          $ref: '#/components/responses/400'
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change Password
      description: Change Password
      security:
        - JWTAuth: []
      requestBody:
        description: Change Password
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
                - confirm_password
              properties:
                old_password:
                  type: string
                  description: old password
                new_password:
                  type: string
                  description: new password 
                confirm_password:
                  type: string
                  description: confirm password 
      responses:
        '200':
          description: Change Password success.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "-"
                  data: null
        '400':
          $ref: '#/components/responses/400'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'

####################################
#  USERS
####################################
  /users:
    get:
      tags:
        - Users
      summary: get users login
      description: get users login

      responses:
        '200':
          description: get users login
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "-"
                  data:
                    {
                      id: 1,
                      fullname: "reza2",
                      email: "reza2@mail.com",
                      address: "pekanbaru",
                      phone_number: "0888888",
                      role: "seller",
                      photo_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                      shop_name : "TOKO JAYA ABADI",
                      shop_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    }

        '500':
          $ref: '#/components/responses/500'
  
  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the users
        schema:
          type: integer
    put:
      tags:
        - Users
      summary: update users
      description: Mengubah data User
      security:
        - JWTAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  fullname: "reza2",
                  address: "pekanbaru",
                  phone_number: "0888888",
                }
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "-"
                  data:
                    {
                      id: 1,
                      fullname: "reza2",
                      email: "reza2@mail.com",
                      address: "pekanbaru",
                      phone_number: "0888888",
                      role: "seller",
                      photo_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                      shop_name : "TOKO JAYA ABADI",
                      shop_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    }

        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
    
    delete:
      tags:
        - Users
      summary: Delete Users
      description: menghapus akun user
      security:
        - JWTAuth: []
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
  
  /users/profile:
    post:
      tags:
        - Users
      summary: update users Profile
      description: Mengubah data User
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo_profile:
                  type: string
                  format: binary
            example:
              photo_profile: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "-"
                  data:
                    {
                      id: 1,
                      fullname: "reza2",
                      email: "reza2@mail.com",
                      address: "pekanbaru",
                      phone_number: "0888888",
                      role: "seller",
                      photo_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                      shop_name : "TOKO JAYA ABADI",
                      shop_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    }

        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
  
  /users/update-seller:
    post:
      tags:
        - Users
      summary: upgrade to seller
      description: Mengubah data User
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shop_profile:
                  type: string
                  format: binary
                shop_name:
                  type: string
            example:
              shop_name : "TOKO JAYA ABADI"
              shop_profile: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: "-"
                  data:
                    {
                      id: 1,
                      fullname: "reza2",
                      email: "reza2@mail.com",
                      address: "pekanbaru",
                      phone_number: "0888888",
                      role: "seller",
                      photo_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png",
                      shop_name : "TOKO JAYA ABADI",
                      shop_profile : "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                    }

        '404':
          $ref: '#/components/responses/404'
        '401' :
          $ref: '#/components/responses/401'
        '500' :
          $ref: '#/components/responses/500'
   
####################################
#  PRODUCT
####################################
  /products:
    get:
      tags:
        - Products
      summary: List all Products
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all Products"
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna merah",
                      "price": 2000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    },
                    {
                      "id": 2,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna biru",
                      "price": 3000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    }
                  ]
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    post:
      tags: 
        - Products
      summary: create products
      description: create products
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              product_name: "Sepatu Barbie"
              description: "sepatu warna merah"
              price: 2000000
              stoct_total: 10
                
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                data:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna merah",
                      "price": 2000000,
                      "stock_total": 10,
                      "stock_sold": 0
                    }
                  ]
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the products
        schema:
          type: integer
    get:
      tags:
        - Products
      summary: get a product by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a product by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 1,
                    "user_id": 1,
                    "product_name": "Sepatu Barbie",
                    "description": "warna merah",
                    "price": 2000000,
                    "stock_total": 10,
                    "stock_sold": 0
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    
    put:
      tags:
        - Products
      summary: update a product
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              product_name: "Sepatu Barbie"
              description: "sepatu warna merah"
              price: 2000000
              stoct_total: 10
      responses:
        200:
          description: "get an updated product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 1,
                    "user_id": 1,
                    "product_name": "Sepatu Barbie",
                    "description": "warna merah",
                    "price": 2000000,
                    "stock_total": 10,
                    "stock_sold": 0
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Products
      summary: delete a product
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 
 
  /users/{id}/products:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Products
      summary: get products by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get products by user id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                example:
                data:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna merah",
                      "price": 2000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    },
                    {
                      "id": 2,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna biru",
                      "price": 3000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    }
                  ]
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 
  
  /categories/{id}/products:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Products
      summary: get products by categories id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get products by categories id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                example:
                data:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna merah",
                      "price": 2000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    },
                    {
                      "id": 2,
                      "user_id": 1,
                      "product_name": "Sepatu Barbie",
                      "description": "warna biru",
                      "price": 3000000,
                      "stock_total": 10,
                      "stock_sold": 8
                    }
                  ]
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /products/{id}/images:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the products
        schema:
          type: integer
    post:
      tags:
        - Products
      summary: add a image of product
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                product_image:
                  type: string
                  format: binary
            example:
              product_image: "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg"
      responses:
        200:
          description: "get an updated product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 1,
                    "product_id": 1,
                    "product_image": "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Products
      summary: delete a image of product
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 
 
####################################
#  CATEGORY
####################################
  /categories:
    get:
      tags:
        - Categories
      summary: List all Categories
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all Categories"
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  [
                    {
                      "id": 1,
                      "category": "Tas",
                    },
                    {
                      "id": 2,
                      "category": "Sepatu",
                    },
                    {
                      "id": 3,
                      "category": "Barang",
                    },
                  ]
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    post:
      tags: 
        - Categories
      summary: create Categories
      description: create Categories
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              category: "Tas"
                
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                data:
                  {
                    "id": 1,
                    "category": 1,
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /categories/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The ID of the category
        schema:
          type: integer
    get:
      tags:
        - Categories
      summary: get a category by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a category by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 1,
                    "category": 1,
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    
    put:
      tags:
        - Categories
      summary: update a category
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/responseObject"
            example:
              category: "Tas Edit"
      responses:
        200:
          description: "get an updated categories"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  {
                    "id": 1,
                    "category": "Tas Edit",
                  }
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Categories
      summary: delete a category
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "-"
                status: true
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 

####################################
#  BASKETS
####################################
  /baskets:
    post:
      tags: 
        - Basket
      summary: add to basket
      description: add product to basket
      security:
        - JWTAuth: []
      requestBody:
        description: add a product to basket
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Basket"
            example:
              product_id: 1
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                "data": {
                    "id": 1,
                    "product_id": 1,
                    "product_pcs": 1,
                    }
                "message": "success add product to basket"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Basket
      summary: get all basket
      description: get all basket by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all basket"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": [
                    {
                      "id": 1,
                      "product_id": 2,
                      "product_name": "Beras",
                      "product_pcs": 1,
                      "product_price": 150000,
                      "product_picture": "beras.jpg",
                      "user_id": 1,
                      "lapak_name": "Toko Kelontong",
                      "lapak_adress": "Jakarta"
                    },
                    {
                      "id": 2,
                      "product_id": 4,
                      "product_name": "Telur",
                      "product_pcs": 1,
                      "product_price": 60000,
                      "product_picture": "telur.jpg",
                      "user_id": 1,
                      "lapak_name": "Toko Kelontong",
                      "lapak_adress": "Jakarta"
                    },
                    {
                      "id": 3,
                      "product_id": 12,
                      "product_name": "Sepatu",
                      "product_pcs": 1,
                      "product_price": 300000,
                      "product_picture": "sepatu.jpg",
                      "user_id": 2,
                      "lapak_name": "Toko Fashion",
                      "lapak_adress": "Medan"
                    },
                    {
                      "id": 4,
                      "product_id": 15,
                      "product_name": "Celana",
                      "product_pcs": 1,
                      "product_price": 250000,
                      "product_picture": "celana.jpg",
                      "user_id": 2,
                      "lapak_name": "Toko Fashion",
                      "lapak_adress": "Medan"
                    },
                  ],                
                    "message": "success get all basket"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /baskets/{id}:
    parameters:
      - $ref: "#/components/parameters/paramId"
    put:
      tags:
        - Basket
      summary: update a basket
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Basket"
            example:
              product_pcs: 2
      responses:
        200:
          description: "get an updated basket"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": {
                        "id": 1,
                        "product_pcs": 2
                    },
                    "message": "success get updated basket"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Basket
      summary: delete a basket
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "succes delete a basket"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 

####################################
#  TRANSACTIONS
####################################
  /transactions:
    post:
      tags: 
        - Transaction
      summary: add transaction
      description: add transaction product from the basket
      security:
        - JWTAuth: []
      requestBody:
        description: transaction
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
            example:
              basket_id: 1
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                "data": {
                    "id": 1,
                    "order_id": "LAPAK-0981276378388656",
                    "payment_status": "pending",
                    "payment_link": "https://www.midtrans.com",
                    "total_payment": 320000
                    }
                "message": "success add product to basket"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Transaction
      summary: get all transaction
      description: get all transaction by user id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all transaction"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": [
                    {
                      "id": 1,
                      "order_id": "LAPAK-0981276378388656",
                      "payment_status": "pending",
                      "payment_link": "https://www.midtrans.com",
                      "total_payment": 320000
                    },
                    {
                      "id": 2,
                      "order_id": "LAPAK-0981276312388656",
                      "payment_status": "success",
                      "payment_link": "https://www.midtrans.com",
                      "total_payment": 125000
                    },
                    {
                      "id": 3,
                      "order_id": "LAPAK-0983216378388656",
                      "payment_status": "failure",
                      "payment_link": "https://www.midtrans.com",
                      "total_payment": 99000
                    },
                    {
                      "id": 4,
                      "order_id": "LAPAK-098127637578656",
                      "payment_status": "success",
                      "payment_link": "https://www.midtrans.com",
                      "total_payment": 45000
                    },
                  ],                
                    "message": "success get all transaction"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
 
####################################
#  DISCUSSIONS
####################################
  /discussions:
    post:
      tags: 
        - Discussion
      summary: discuss about products
      description: add discussions
      security:
        - JWTAuth: []
      requestBody:
        description: add a question to seller
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Discussion"
            example:
              product_id: 1
              discussion: "barang ini ready gan?"
                
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                "data": {
                    "id": 1,
                    "discussion": "barang ini ready gan?"
                    }
                "message": "success add discussion"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - Discussion
      summary: get all discussions 
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all discussions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": [
                    {
                        "id": 1,
                        "product_id": 2,
                        "discussion": "barangnya ready gan?"
                    },
                    {
                        "id": 2,
                        "parent_id": 1,
                        "product_id": 2,
                        "discussion": "ready kak"
                    },
                    {
                        "id": 3,
                        "product_id": 3,
                        "discussion": "boleh nego gan?"
                    },
                    {
                        "id": 4,
                        "parent_id": 3,
                        "product_id": 3,
                        "discussion": "gak. harga pas"
                    },
                  ],                
                    "message": "success get all discussions"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 

  /discussion/{id}:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Discussion
      summary: get a discussion by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a discussion by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": {
                        "id": 1,
                        "product_id": 2,
                        "discussion": "barang ini ready gan?"
                    },
                    "message": "success get discussion detail"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Discussion
      summary: update a discussion
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Discussion"
            example:
              product_id: 2
              discussion: "boleh nego kak?"
      responses:
        200:
          description: "get an updated feedback"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": {
                        "id": 2,
                        "product_id": 2,
                        "discussion": "boleh nego kak?"
                    },
                    "message": "success get updated discussion"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Discussion
      summary: delete a discussion
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "succes delete a discussion"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"       

  /products/{id}/discussions:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Discussion
      summary: get discussions by produst id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a discussions by product id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                  "data": [
                      {
                          "id": 1,
                          "discussion": "barangnya ready gan?",
                          "user": [
                            {
                          "id": 1,
                          "username": "jamal",
                          "profile_picture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            }
                          ]
                      },
                      {
                          "id": 2,
                          "discussion": "boleh nego kak?",
                          "user": [
                            {
                          "id": "1",
                          "username": "jamal",
                          "profile_picture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            }
                          ]
                      },
                    ],
                  "message": "success get product's discussions"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

####################################
#  FEEDBACKS
####################################
  /feedbacks:
    post:
      tags: 
        - Feedback
      summary: feedbacks for the products
      description: add feedbacks
      security:
        - JWTAuth: []
      requestBody:
        description: add a feedback for the product
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
            example:
              product_id: 1
              rating: 4
              feedback: "bahannya lembut"
                
      responses:
        201:
          description: "success insert data"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
              example:
                "data": {
                    "id": 1,
                    "rating": 4,
                    "feedback": "bahannya lembut"
                    }
                "message": "success add feedback"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    get:
      tags:
        - Feedback
      summary: get all feedbacks 
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get all feedbacks"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": [
                    {
                        "id": 1,
                        "parent_id": 0,
                        "product_id": 2,
                        "rating": 4,
                        "feedback": "bahannya lembut"
                    },
                    {
                        "id": 2,
                        "parent_id": 1,
                        "product_id": 2,
                        "feedback": "terima kasih sudah berbelanja di toko kami"
                    },
                    {
                        "id": 3,
                        "parent_id": 0,
                        "product_id": 3,
                        "rating": 5,
                        "feedback": "harganya sesuai, suka deh sama produknya"
                    },
                    {
                        "id": 4,
                        "parent_id": 2,
                        "product_id": 3,
                        "feedback": "terima kasih sudah berbelanja di toko kami"
                    },
                  ],                
                    "message": "success get all feedbacks"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"    

  /feedbacks/{id}:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Feedback
      summary: get a feedback by id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a feedback by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": {
                        "id": 1,
                        "product_id": 2,
                        "rating": 4,
                        "feedback": "bahannya lembut"
                    },
                    "message": "success get feedback detail"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    put:
      tags:
        - Feedback
      summary: update a feedback
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
            example:
              product_id: 2
              rating: 1
              feedback: "kainnya cepet rusak"
      responses:
        200:
          description: "get an updated feedback"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                    "data": {
                        "id": 1,
                        "product_id": 2,
                        "rating": 1,
                        "feedback": "kainnya cepet rusak"
                    },
                    "message": "success get updated feedback"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"  

    delete:
      tags:
        - Feedback
      summary: delete a feedback
      security:
        - JWTAuth: []
      responses:
        200:
          description: success delete data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "succes delete a feedback"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500" 
      

  /products/{id}/feedbacks:
    parameters:
      - $ref: "#/components/parameters/paramId"
    get:
      tags:
        - Feedback
      summary: get feedbacks by produst id
      security:
        - JWTAuth: []
      responses:
        200:
          description: "get a feedbacks by product id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                {
                  "data": [
                      {
                          "id": 1,
                          "rating": 3,
                          "feedback": "barangnya bagus",
                          "user": [
                            {
                          "id": 1,
                          "username": "jamal",
                          "profile_picture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            }
                          ]
                      },
                      {
                          "id": 2,
                          "rating": 4.5,
                          "feedback": "barangnya lumayan",
                          "user": [
                            {
                          "id": 1,
                          "username": "jamal",
                          "profile_picture": "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
                            }
                          ]
                      },
                    ],
                  "message": "success get product's feedbacks"
                }
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

    
####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string

    User:
      type: object
      required:
        - fullname
        - address
        - email
        - password
        - role
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the user
        fullname:
          type: string
          description: fullname
        address:
          type: string
          description: address
        email:
          type: string
          description: email
        password:
          type: string
          description: password
        role:
          type: string
          description: role

    Product:
      type: object
      required:
        - user_id
        - product_name
        - description
        - price
        - stock_total
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the discussions
        user_id:
          type: integer
          format: int64
          description: the ID of the user
        product_name: 
          type: string
          description: the content of the product_name
        description: 
          type: string
          description: the content of the description
        price: 
          type: integer
          description: price
        stock_total: 
          type: integer
          description: stock_total
        stock_sold: 
          type: integer
          description: stock_sold

    Category:
      type: object
      required:
        - category
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the discussions
        category:
          type: string
          description: category


    Discussion:
      type: object
      required:
        - product_id
        - parent_id
        - discussion
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the discussions
        product_id:
          type: integer
          format: int64
          description: the ID of the products
        parent_id: 
          type: integer
          format: int64
          description: the ID of the discussions
        discussion: 
          type: string
          description: the content of the discussion

    Feedback:
      type: object
      required:
        - product_id
        - parent_id
        - Feedback
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the feedbacks
        product_id:
          type: integer
          format: int64
          description: the ID of the products
        parent_id: 
          type: integer
          format: int64
          description: the ID of the feedbacks
        feedback: 
          type: string
          description: the content of the feedbacks

    Product_Type:
      type: object
      required:
        - product_id
        - product_type
      properties:
        id: 
          type: integer
          format: int64
          description: the ID of the product types
        product_id: 
          type: integer
          format: int64
          description: the ID of the products
        Product_Type:
          type: string
          description: types of products

    Basket:
      type: object
      required:
        - product_id
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the basket
        product_id:
          type: integer
          format: int64
          description: the ID of the products
        product_name: 
          type: string
          description: name of product
        product_pcs:
          type: integer
          format: int64
          description: number of packs purchased
        product_price: 
          type: integer
          format: int64
          description: price of product
        product_picture: 
          type: string
          description: picture of product
        user_id:
          type: integer
          format: int64
          description: the ID of the user
        lapak_name:
          type: string
          description: name of lapak
        lapak_adress:
          type: string
          description: address of lapak
          
    Transaction:
      type: object
      required:
        - basket_id
      properties:
        id:
          type: integer
          format: int64
          description: the ID of the transaction
        order_id:
          type: integer
          format: int64
          description: the ID of the order
        payment_status: 
          type: string
          description: status of payment
        payment_link: 
          type: string
          description: link of payment
        total_payment:
          type: integer
          format: int64
          description: total of payment
        
  parameters:
    paramId:
      name: id
      in: path
      required: true
      schema: 
        type: integer
        example: 1

    productId:
      name: id_product
      in: path
      required: true
      schema: 
        type: integer
        example: 1


  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
          example:
            status: false
            message: "error in your request"

    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
          example:
            status: false
            message: "request does not contain a valid token"

    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
          example:
            status: false
            message: "data not found"

    '204':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
          example:
            status: true
            message: "Delete data success"
            data : []

    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
              message:
                type: string
          example:
            status: false
            message: "internal server error"